name: trigger_issue

on:
  issues:
    types: [pinned]    

jobs:
 dump:
  runs-on: ubuntu-latest
  steps:
  - name: get release/announcement
    id: rel_annou
    env:
      ISSUE_CONTEXT: ${{ toJson(github.event.issue) }}
    run: |
      echo $ISSUE_CONTEXT > temp_title.txt
      echo $(cat temp_title.txt)
      sed -nr 's/.*"title": (.*), "updated.*/\1/p' <temp_title.txt >temp_title1.txt
      echo $(cat temp_title1.txt)
      sed ':a;N;$!ba;s/"/\"/g' <temp_title1.txt >temp_title2.txt
      echo $(cat temp_title2.txt)
      sed ':a;N;$!ba;s/\x27/\\\x27/g' <temp_title2.txt >title.txt
      echo $(cat title.txt)
      if [[ $(cat title.txt) == *"Release"* ]]
      then
        echo "::set-output name=release::true"
      else
        echo "::set-output name=release::false"
      fi
  - name: Dump GitHub context
    env:
      GITHUB_CONTEXT: ${{ toJson(github) }}
    run: echo "$GITHUB_CONTEXT"
  - name: print even
    id: event_print
    env:
      ISSUE_CONTEXT: ${{ toJson(github.event.issue) }}
    run: |
      echo $ISSUE_CONTEXT
      
#      tr '"' '\"' <'${{ github.event.issue.body }}' > temp.txt
#      tr -d '\n' <temp.txt >temp1.txt 
#      tr -d '\r' <temp1.txt >temp2.txt
      
  - name: Get summary
    id: summary
    env:
      ISSUE_CONTEXT: ${{ toJson(github.event.issue) }}
    run: |
      echo $ISSUE_CONTEXT > temp.txt
      sed ':a;N;$!ba;s/\n/ /g' <temp.txt >temp1.txt 
      sed ':a;N;$!ba;s/\r/ /g' <temp1.txt >temp2.txt
      sed -nr 's/.*### Brief description of the announcement(.*)### Detailed context.*/\1/p' <temp2.txt >temp3.txt
      sed ':a;N;$!ba;s/"/\"/g' <temp3.txt >temp4.txt
      sed ':a;N;$!ba;s/\x27/\\\x27/g' <temp4.txt >temp5.txt
      echo "::set-output name=summary::$(cat temp5.txt)"
      echo $(cat temp5.txt)
      
  - name: Get title
    id: title
    env:
      ISSUE_CONTEXT: ${{ toJson(github.event.issue) }}
    run: |
      echo $ISSUE_CONTEXT > temp_title.txt
      sed -nr 's/.*"title": (.*), "updated.*/\1/p' <temp_title.txt >temp_title1.txt
      sed ':a;N;$!ba;s/"/\"/g' <temp_title1.txt >temp_title2.txt
      sed ':a;N;$!ba;s/\x27/\\\x27/g' <temp_title2.txt >title.txt
      echo "::set-output name=title::$(cat title.txt)"
      echo $(cat title.txt)
      
  - name: Sanitize description
    id: description
    env:
      ISSUE_CONTEXT: ${{ toJson(github.event.issue) }}
    run: |
      echo $ISSUE_CONTEXT > temp.txt
      echo $(cat temp.txt)    
      sed -nr ':a;N;$!ba;s/\n/\\\n/g' <temp.txt >temp1.txt
      echo $(cat temp1.txt)    
      sed ':a;N;$!ba;s/\r/ /g' <temp1.txt >temp2.txt
      echo $(cat temp2.txt)    
      sed -nr 's/.*"body": (.*), "closed_at.*/\1/p' <temp2.txt >temp3.txt
      echo $(cat temp3.txt)    
      sed ':a;N;$!ba;s/"/\"/g' <temp3.txt >temp4.txt
      echo $(cat temp4.txt)    
      sed ':a;N;$!ba;s/\x27/\\\x27/g' <temp4.txt >temp5.txt 
      echo "::set-output name=description::$(cat temp5.txt)"
      echo $(cat temp5.txt)        
      
#      sed ':a;N;$!ba;s/\n/\\\n/g' <temp.txt >temp1.txt 
  - name: Get current date
    id: date
    run: |
        echo "::set-output name=date::$(date +'%Y%m')"
        echo "::set-output name=date_spelled::$(date +'%B %Y')"

  - name: Repository Dispatch
    uses: peter-evans/repository-dispatch@v1
    with:
      token: ${{ secrets.TOKEN_VALUE_HERE }}
      repository: AlexAntn/test_actions
      event-type: announcement_launched
      client-payload: '{"description": ${{ steps.description.outputs.description }}, "id": "${{ steps.date.outputs.date }}", "title": ${{ steps.title.outputs.title }}, "date": "${{ steps.date.outputs.date_spelled }}", "summary": "${{ steps.summary.outputs.summary }}", "image": "???", "type" : "announcement_launched", "release": "${{ steps.rel_annou.outputs.release }}"}'
